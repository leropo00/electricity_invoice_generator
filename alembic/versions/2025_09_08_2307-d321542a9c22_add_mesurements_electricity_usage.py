"""add_mesurements_electricity_usage

Revision ID: d321542a9c22
Revises: e2dc09a8d572
Create Date: 2025-09-08 23:07:08.214555

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'd321542a9c22'
down_revision: Union[str, Sequence[str], None] = 'e2dc09a8d572'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('measurements_electricity_usage',
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('measured_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('consumption_kwh', sa.Float(), nullable=False),
    sa.Column('price_per_kwh', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['electricity_customers.id'], ),
    sa.PrimaryKeyConstraint('customer_id', 'measured_at')
    )
    # ### end Alembic commands ###

    # create hypertable for efficient use of timeseries data
    op.execute("SELECT create_hypertable('measurements_electricity_usage', 'measured_at')")
    
    # create index, since it will most queries will take customer_id into account
    op.execute("CREATE INDEX ix_customer_electricity_measurements ON measurements_electricity_usage(customer_id, measured_at DESC)")

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('measurements_electricity_usage')
    # ### end Alembic commands ###
